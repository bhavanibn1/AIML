{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bhavanibn1/AIML/blob/main/b1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jXTeOugRzsrh"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tTUxEO1bzuEI",
        "outputId": "4fe39a17-9f8c-4c5d-b6d3-02ba615af629"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "0     atlanta  63.0                NaN\n",
            "1      austin  64.0               71.0\n",
            "2      boston   NaN               67.0\n",
            "3     chicago  61.0                NaN\n",
            "4     detroit   NaN               73.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "8       tampa   NaN                NaN\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "path=pd.read_excel('/content/sample dataset.xlsx')\n",
        "df=pd.DataFrame(path)\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iaiHgE9tz4n6",
        "outputId": "0d34a6f6-a197-426d-8164-46c1c70404c6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10 entries, 0 to 9\n",
            "Data columns (total 3 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   city               10 non-null     object \n",
            " 1   AT&T               7 non-null      float64\n",
            " 2   veerizon wireless  7 non-null      float64\n",
            "dtypes: float64(2), object(1)\n",
            "memory usage: 368.0+ bytes\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o_XmjoSB0EPN",
        "outputId": "c38ba8e1-3d86-4011-9459-776487fd0af8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(10, 3)\n"
          ]
        }
      ],
      "source": [
        "shape=df.shape\n",
        "print(shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "sKUoAZgP0Lbu",
        "outputId": "9f1df1eb-08c3-4fa5-b337-54685ca34d53"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>city</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AT&amp;T</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>veerizon wireless</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><label><b>dtype:</b> int64</label>"
            ],
            "text/plain": [
              "city                 0\n",
              "AT&T                 3\n",
              "veerizon wireless    3\n",
              "dtype: int64"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G1FqqJ_60SY6",
        "outputId": "f4a4a821-9c48-4604-d3f9-f1d18747546a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "1      austin  64.0               71.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data=pd.read_excel('/content/sample dataset.xlsx')\n",
        "df=pd.DataFrame(data)\n",
        "df_drop=df.dropna()\n",
        "print(df_drop)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CNj9eNvy0eql",
        "outputId": "e3022e3e-b6b0-48fd-9768-314829202d7c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "1      austin  64.0               71.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna()\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JgjMToQT0ymQ",
        "outputId": "456c5330-0a08-494d-b1bc-63a19f4f1b57"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city\n",
            "0     atlanta\n",
            "1      austin\n",
            "2      boston\n",
            "3     chicago\n",
            "4     detroit\n",
            "5      housto\n",
            "6    new york\n",
            "7       miami\n",
            "8       tampa\n",
            "9  washington\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna(axis=1)\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qWrs0cmb09jb",
        "outputId": "51687c59-6202-4fd5-e1e9-fab2535c358a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "1      austin  64.0               71.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna(subset=['veerizon wireless','AT&T'])\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "If3piiYo1_h9"
      },
      "source": [
        "attribute"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-RNKKsgn1zKn"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pd_nmpT92FRr",
        "outputId": "3828bd4c-49f3-4985-e12e-1eda3a5e9a12"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city\n",
            "0     atlanta\n",
            "1      austin\n",
            "2      boston\n",
            "3     chicago\n",
            "4     detroit\n",
            "5      housto\n",
            "6    new york\n",
            "7       miami\n",
            "8       tampa\n",
            "9  washington\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna(axis=1)\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bn8g8YUS2ObU",
        "outputId": "53cad62b-020d-44b3-bbfc-9d288603a566"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Empty DataFrame\n",
            "Columns: []\n",
            "Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna(axis=1,thresh=len(df)*2)\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "30oJpHwg2mY9",
        "outputId": "a5e6f476-0ddd-4f97-c38b-8f9bf3cbceaa"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "0     atlanta  63.0                NaN\n",
            "1      austin  64.0               71.0\n",
            "2      boston   NaN               67.0\n",
            "3     chicago  61.0                NaN\n",
            "4     detroit   NaN               73.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "8       tampa   NaN                NaN\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna(axis=1,how='all')\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M0j6wX9N3Bvh"
      },
      "source": [
        "estimate"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xg2ffyDn4r8b",
        "outputId": "cafa92e8-f258-48d3-863a-540875e923af"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city       AT&T  veerizon wireless\n",
            "0     atlanta  63.000000          70.428571\n",
            "1      austin  64.000000          71.000000\n",
            "2      boston  64.571429          67.000000\n",
            "3     chicago  61.000000          70.428571\n",
            "4     detroit  64.571429          73.000000\n",
            "5      housto  63.000000          75.000000\n",
            "6    new york  68.000000          73.000000\n",
            "7       miami  66.000000          69.000000\n",
            "8       tampa  64.571429          70.428571\n",
            "9  washington  67.000000          65.000000\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "df = pd.read_excel('/content/sample dataset.xlsx')\n",
        "# Identify numeric columns\n",
        "numeric_columns = df.select_dtypes(include=['number']).columns\n",
        "# Apply SimpleImputer to numeric columns only\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "df_imputed = pd.DataFrame(imputer.fit_transform(df[numeric_columns]), columns=numeric_columns)\n",
        "# Combine imputed numeric columns with original non-numeric columns\n",
        "df_clean = pd.concat([df.drop(numeric_columns, axis=1), df_imputed], axis=1)\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0I_YMCLc5Scq",
        "outputId": "dd5a3dbf-4480-4b13-9c2a-3cc43434053c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "0     atlanta  63.0               71.0\n",
            "1      austin  64.0               71.0\n",
            "2      boston  64.0               67.0\n",
            "3     chicago  61.0               71.0\n",
            "4     detroit  64.0               73.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "8       tampa  64.0               71.0\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "df = pd.read_excel('/content/sample dataset.xlsx')\n",
        "numeric_columns = df.select_dtypes(include=['number']).columns\n",
        "imputer = SimpleImputer(strategy='median')\n",
        "df_imputed = pd.DataFrame(imputer.fit_transform(df[numeric_columns]), columns=numeric_columns)\n",
        "df_clean = pd.concat([df.drop(numeric_columns, axis=1), df_imputed], axis=1)\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qDWtLV-x5gf6"
      },
      "source": [
        "regresion"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tYZfxneC5dq7",
        "outputId": "3d921014-3019-45a3-8b56-5dd13f612d49"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "        AT&T  veerizon wireless\n",
            "0  63.000000              73.84\n",
            "1  64.000000              71.00\n",
            "2  66.530000              67.00\n",
            "3  61.000000              73.84\n",
            "4  65.608667              73.00\n",
            "5  63.000000              75.00\n",
            "6  68.000000              73.00\n",
            "7  66.000000              69.00\n",
            "8  62.542000              73.84\n",
            "9  67.000000              65.00\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/impute/_iterative.py:800: ConvergenceWarning: [IterativeImputer] Early stopping criterion not reached.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.experimental import enable_iterative_imputer\n",
        "from sklearn.impute import IterativeImputer\n",
        "df=pd.read_excel('/content/sample dataset.xlsx')\n",
        "imputer = IterativeImputer(estimator=RandomForestRegressor(), max_iter=10, tol=1e-10, imputation_order='roman')\n",
        "df_imputed = pd.DataFrame(imputer.fit_transform(df[numeric_columns]), columns=numeric_columns)\n",
        "print(df_imputed)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iOUdaFs_7N_c"
      },
      "source": [
        "k-nearest neighbors"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pn4QeR6O7Tq3",
        "outputId": "8785fa0e-3dc1-4dcd-bab7-49c70882f840"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "        AT&T  veerizon wireless\n",
            "0  63.000000          73.000000\n",
            "1  64.000000          71.000000\n",
            "2  66.500000          67.000000\n",
            "3  61.000000          73.000000\n",
            "4  66.000000          73.000000\n",
            "5  63.000000          75.000000\n",
            "6  68.000000          73.000000\n",
            "7  66.000000          69.000000\n",
            "8  64.571429          70.428571\n",
            "9  67.000000          65.000000\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import KNNImputer\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "data=pd.read_excel('/content/sample dataset.xlsx')\n",
        "df=pd.DataFrame(data)\n",
        "numeric_df = df.select_dtypes(include=['number'])\n",
        "imputer=KNNImputer(n_neighbors=2)\n",
        "df_imputed_numeric = pd.DataFrame(imputer.fit_transform(numeric_df), columns=numeric_df.columns)\n",
        "print(df_imputed_numeric)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o1IIM1ld8C9S"
      },
      "source": [
        "dealing with outliers\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WEDeYZ8N8F2z",
        "outputId": "1c7465e0-32d1-48ba-a625-e50963e4c7e1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "0     atlanta  63.0                NaN\n",
            "1      austin  64.0               71.0\n",
            "2      boston   NaN               67.0\n",
            "3     chicago  61.0                NaN\n",
            "4     detroit   NaN               73.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "8       tampa   NaN                NaN\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data=pd.read_excel('/content/sample dataset.xlsx')\n",
        "df=pd.DataFrame(data)\n",
        "df_no_imputation=df.copy()\n",
        "print(df_no_imputation)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "va5i90IN8ubB"
      },
      "source": [
        "upper& lower cap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jNDPSWr18lmz",
        "outputId": "57b9304b-bfe4-4a7e-a81b-f4d797a878a9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "0     atlanta  63.0               75.0\n",
            "1      austin  64.0               71.0\n",
            "2      boston  68.0               67.0\n",
            "3     chicago  61.0               75.0\n",
            "4     detroit  68.0               73.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "8       tampa  68.0               75.0\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data=pd.read_excel('/content/sample dataset.xlsx')\n",
        "df=pd.DataFrame(data)\n",
        "df_upper_cap=df.fillna(df.max())\n",
        "print(df_upper_cap)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e1WtAV3s9Iax",
        "outputId": "56a18331-b15a-4308-ea28-b57d8c512bab"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless\n",
            "0     atlanta  63.0               65.0\n",
            "1      austin  64.0               71.0\n",
            "2      boston  61.0               67.0\n",
            "3     chicago  61.0               65.0\n",
            "4     detroit  61.0               73.0\n",
            "5      housto  63.0               75.0\n",
            "6    new york  68.0               73.0\n",
            "7       miami  66.0               69.0\n",
            "8       tampa  61.0               65.0\n",
            "9  washington  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data=pd.read_excel('/content/sample dataset.xlsx')\n",
        "df=pd.DataFrame(data)\n",
        "df_lower_cap=df.fillna(df.min())\n",
        "print(df_lower_cap)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SbDjUd949fkc"
      },
      "source": [
        "log transformation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_ezxxDfG9UkZ",
        "outputId": "95846cd7-2ff3-4ce9-f189-268eb3c68b32"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless  log_AT&T\n",
            "0     atlanta  63.0                NaN  4.143135\n",
            "1      austin  64.0               71.0  4.158883\n",
            "2      boston   NaN               67.0  0.000000\n",
            "3     chicago  61.0                NaN  4.110874\n",
            "4     detroit   NaN               73.0  0.000000\n",
            "5      housto  63.0               75.0  4.143135\n",
            "6    new york  68.0               73.0  4.219508\n",
            "7       miami  66.0               69.0  4.189655\n",
            "8       tampa   NaN                NaN  0.000000\n",
            "9  washington  67.0               65.0  4.204693\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "data=pd.read_excel('/content/sample dataset.xlsx')\n",
        "df=pd.DataFrame(data)\n",
        "df['log_AT&T']=df['AT&T'].apply(lambda x:np.log(x) if x>0 else 0)\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lrLRxouk_UMh",
        "outputId": "868a364a-659b-4f1a-d71e-964a3649e9d3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "         city  AT&T  veerizon wireless  log_AT&T  log_veerizon wireless\n",
            "0     atlanta  63.0                NaN  4.143135               0.000000\n",
            "1      austin  64.0               71.0  4.158883               4.262680\n",
            "2      boston   NaN               67.0  0.000000               4.204693\n",
            "3     chicago  61.0                NaN  4.110874               0.000000\n",
            "4     detroit   NaN               73.0  0.000000               4.290459\n",
            "5      housto  63.0               75.0  4.143135               4.317488\n",
            "6    new york  68.0               73.0  4.219508               4.290459\n",
            "7       miami  66.0               69.0  4.189655               4.234107\n",
            "8       tampa   NaN                NaN  0.000000               0.000000\n",
            "9  washington  67.0               65.0  4.204693               4.174387\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = pd.read_excel('/content/sample dataset.xlsx')\n",
        "df = pd.DataFrame(data)\n",
        "df['log_AT&T'] = np.where(df['AT&T'] > 0, np.log(df['AT&T']), 0)\n",
        "df['log_veerizon wireless'] = np.where(df['veerizon wireless'] > 0, np.log(df['veerizon wireless']), 0)\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "HasGVHMnNdHA",
        "outputId": "f04c607f-f28e-4adc-e657-28218c805913"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 500x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = pd.read_excel('/content/sample dataset.xlsx')\n",
        "x=np.linspace(2,100)\n",
        "y=x**2\n",
        "plt.figure(figsize=(5,6))\n",
        "plt.plot(x,y,label='original data')\n",
        "plt.yscale('log')\n",
        "plt.xlabel('x-axis')\n",
        "plt.ylabel('y-axis(log scale)')\n",
        "plt.title('log transformation plot')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UfTEjgG1To8C"
      },
      "source": [
        "exponential"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "2JMoxSqWTrvx",
        "outputId": "11c1eedb-829d-4cf4-944e-44b7f08777e6"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 500x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = pd.read_excel('/content/sample dataset.xlsx')\n",
        "x=np.linspace(60,100)\n",
        "y=np.exp(x/10)\n",
        "plt.figure(figsize=(5,6))\n",
        "plt.plot(x,y,label='exponential transformation')\n",
        "plt.xlabel('x-axis')\n",
        "plt.ylabel('exponential(y)')\n",
        "plt.title('exponential transformation polt')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gl-3zKXiRqw9"
      },
      "source": [
        "log transformation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "oMHmpJ9tRqCj",
        "outputId": "37c41b99-7740-4171-b2d3-ada52edaf088"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 500x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = pd.read_excel('/content/sample dataset.xlsx')\n",
        "log_y=np.log(y)\n",
        "plt.figure(figsize=(5,6))\n",
        "plt.plot(x,log_y,label='log transformation')\n",
        "plt.xlabel('x-axis')\n",
        "plt.ylabel('log(y)')\n",
        "plt.title('log transformation plot')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RTjeWtDQSepE"
      },
      "source": [
        "square root"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "lwvSY-ZhSh1_",
        "outputId": "1896607d-e0a9-4704-f882-00ee0eb2e1d4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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e/fuxbx58/D999/jjz/+wAcffGDQtl73PoxGo8lxuWXLlkhISMCECRNQrVo1WFlZ4cGDB+jbty+0Wq3e+kqlMseLgVarhbOzMzZu3Jjrfb5aDrnJbbuGet1jLiy5ZTZ0PHPby3uVs7Mzzp07h7///hu7d+/G7t27sXbtWvTp0wdhYWEF+phe3kvMT87XLRdC6P7/888/x9q1azF69Gg0aNBAdxKH7t275xiPwpKfnFT8sDxJp1y5chg2bBiGDRuG+Ph41KlTB7NmzcIHH3wAT09PAC/29Jo3b667jVqtRkxMDPz9/XXLsv+yTkxM1Nv+q3/tRkdH49q1awgLC0OfPn10yw05RFipUiXs27cPjRo1eu2L79vw9PTEvn37kJKSorf3eeXKFd312f/VarW4fv263gSTuLg4JCYm6tYDDCvYtynjghjP3JiZmeGjjz7CRx99BK1Wi2HDhuGnn37ClClTcuxxZytbtiwsLS1x9erVHNdduXIFcrn8rSeZGeK3335DSEgIFixYoFuWkZGR47lpyHh7enri33//hVar1fsD5tXnRkG5fv063n//fd3l1NRUPHr0CG3btn3njEX9R19JwsO2BI1Gk+MQlrOzM9zc3JCZmQkACAoKQtmyZbFixQqoVCrdeuvWrcvxQlSpUiUAwJEjR/TuY+XKlXrrZf9F/vJf4EIILF68ON/ZP/nkE2g0Gnz77bc5rsvKysqRLb/atm0LjUaDH374QW/5okWLIJPJdHvj2S9goaGheustXLgQANCuXTvdMisrq3znyZ49a0j+ghjPVz19+lTvslwu183GzH5uvC5Lq1at8Oeff+odXoyLi8OmTZvQuHFj2NravnWu/DIxMcmxh7d06dIcR0GsrKwA5G+827Zti9jYWGzdulW3LCsrC0uXLoW1tbXuMHlBWblyJdRqte7y8uXLkZWVlecRofxmfJvnGb3APU9CSkoKKlSogC5dusDf3x/W1tbYt28fIiIidH+xKxQKzJw5E4MHD0bz5s3RrVs3xMTEYO3atTne8/T19cV7772HSZMmISEhAQ4ODtiyZQuysrL01qtWrRoqVaqEL7/8Eg8ePICtrS1+//33fL8XBABNmzbF4MGDMWfOHJw7dw6tWrWCQqHA9evXsW3bNixevBhdunQxeEw++ugjvP/++5g8eTJu374Nf39/7N27F3/++SdG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0SNs375d7wVcCIFvvvkGq1atQmJiIho1aoTly5fDx8dHt05CQgI+//xz7Ny5E3K5HJ07d8bixYthbW1dKJkz1FrU/j68ULb9JpdmtIal2Zt/ZI8ePUKPHj0wd+5cdOzYESkpKTh69KiufBcsWIB169bh559/RvXq1bFgwQJs374dzZs3NyiPXC7HkiVL4O3tjVu3bmHYsGFQqVRYtWqVbp309HR8//33WL16NRwdHeHs7IwRI0bg0qVL2LJlC9zc3LB9+3a0adMG0dHRej/bV02bNg3fffcdQkNDYWpqiu3bt2PUqFEIDQ1FcHAw/vrrL/Tr1w8VKlTA+++/D61Wq3vxP3z4MLKysjB8+HB069YNhw4dQrdu3XDhwgXs2bMH+/btA4BcDyd++eWXuHz5MpKTk7F27VoAgIODAx4+fAgAmDhxIhYsWIDatWvD3NwcGRkZCAwMxIQJE2Bra4v//e9/6N27N7y9vVGtWjXddsPCwjB27FicOnUKJ06cQN++fdGoUSO0bNkSv//+OxYtWoQtW7bA19cXsbGxOH/+PADgjz/+wMSJE3HhwgX88ccfujPp9O3bF9evX8d///tf2NraYsKECWjbti0uXbqk2xvO7ecBAIsWLcLs2bMxZcoULFq0CL1790bDhg3Rv39/zJs3DxMmTECfPn1w8eJFyGSy1z7GSpUqoV69eli8eDGuXbuGmjVrYsaMGQCAsmXL4vbt23pjGxUVhU8++QTTpk1D165dceDAAXz55ZdwcnJC3759destWLAA3377Lb766iv89ttvGDp0KJo2bYqqVau++YlKVAgkLc+0tDT4+/ujf//+6NSpU47r586diyVLliAsLAze3t6YMmUKWrdujUuXLuk+/NyrVy88evQI4eHhUKvV6NevHwYNGoRNmzYV9cMxGo8ePUJWVhY6deoET09PAICfn5/u+tDQUEyaNEk35itWrMDff/9t8P28/H6Wl5cXZsyYgaFDh+qVp1qtxrJly+Dv7w/gxZ7g2rVrcffuXbi5uQF4UU579uzB2rVrMXv27NfeX8+ePdGvXz/d5R49eqBv374YNmwYAGDs2LE4efIk5s+fj/fffx/79+9HdHQ0YmJi4O7uDgBYv349fH19ERERgbp168La2hqmpqZ5Hkq0traGhYUFMjMzc11v9OjROZ6/X375pe7/P//8c/z999/Y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\n",
            "text/plain": [
              "<Figure size 500x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = pd.read_excel('/content/sample dataset.xlsx')\n",
        "sqrt_y=np.sqrt(y)\n",
        "plt.figure(figsize=(5,6))\n",
        "plt.plot(x,sqrt_y,label='square root transformation')\n",
        "plt.xlabel('x-axis')\n",
        "plt.ylabel('square root(y)')\n",
        "plt.title('square root transformation plot')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9epAGySwTEIm"
      },
      "source": [
        "cube root"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "nK9ayQ9XTD4K",
        "outputId": "4cf0c527-3adb-4a04-be35-d6c0c7fba2d3"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 500x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = pd.read_excel('/content/sample dataset.xlsx')\n",
        "cube_root_y=np.cbrt(y)\n",
        "plt.figure(figsize=(5,6))\n",
        "plt.plot(x,cube_root_y,label='cube root transformation')\n",
        "plt.xlabel('x-axis')\n",
        "plt.ylabel('cube root(y)')\n",
        "plt.title('cube root transformation plot')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W_HZSViRCBuL"
      },
      "source": [
        "remove objects"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dkwnJAXPCBct",
        "outputId": "2062ee36-cbc5-416b-c240-1227fa69067a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   city  AT&T  veerizon wireless\n",
            "0   NaN  63.0                NaN\n",
            "1   NaN  64.0               71.0\n",
            "2   NaN   NaN               67.0\n",
            "3   NaN  61.0                NaN\n",
            "4   NaN   NaN               73.0\n",
            "5   NaN  63.0               75.0\n",
            "6   NaN  68.0               73.0\n",
            "7   NaN  66.0               69.0\n",
            "8   NaN   NaN                NaN\n",
            "9   NaN  67.0               65.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "data = pd.read_excel('/content/sample dataset.xlsx')\n",
        "df = pd.DataFrame(data)\n",
        "df['city'] = pd.to_numeric(df['city'], errors='coerce')\n",
        "df['veerizon wireless'] = pd.to_numeric(df['veerizon wireless'], errors='coerce')\n",
        "Q1=df.quantile(0.25)\n",
        "Q3=df.quantile(0.75)\n",
        "IQR=Q3-Q1\n",
        "df_no_outliers=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]\n",
        "print(df_no_outliers)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "dGJQ2xf3L4Po",
        "outputId": "cec2ae33-7804-4e16-ec33-f09497729000"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "data = pd.read_excel('/content/sample dataset.xlsx')\n",
        "df = pd.DataFrame(data)\n",
        "df.boxplot(column='AT&T')\n",
        "plt.title(\"BOX PLOT\")\n",
        "plt.ylabel('veerizon wireless')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QTt9A6Rsn6vz"
      },
      "source": [
        "internet usage"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u_Z9P-c6oSB1"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "42WnOA0Worr6",
        "outputId": "08ca9f43-fa5b-4149-a341-c2f639e35913"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                country  incomeperperson  internetuserate  urbanrate\n",
            "0           Afghanistan              NaN         3.654122      24.04\n",
            "1               Albania      1914.996551        44.989947      46.72\n",
            "2               Algeria      2231.993335        12.500073      65.22\n",
            "3               Andorra     21943.339900        81.000000      88.92\n",
            "4                Angola      1381.004268         9.999954      56.70\n",
            "..                  ...              ...              ...        ...\n",
            "208             Vietnam       722.807559        27.851822      27.84\n",
            "209  West Bank and Gaza              NaN        36.422772      71.90\n",
            "210         Yemen, Rep.       610.357367        12.349750      30.64\n",
            "211              Zambia       432.226337        10.124986      35.42\n",
            "212            Zimbabwe       320.771890        11.500415      37.34\n",
            "\n",
            "[213 rows x 4 columns]\n"
          ]
        }
      ],
      "source": [
        "path=('/content/internet dataset.zip')\n",
        "df=pd.read_csv(path)\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M58Py-Kooz2Z",
        "outputId": "6ee856b1-1833-4068-887a-26491c1c7bea"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 213 entries, 0 to 212\n",
            "Data columns (total 4 columns):\n",
            " #   Column           Non-Null Count  Dtype  \n",
            "---  ------           --------------  -----  \n",
            " 0   country          213 non-null    object \n",
            " 1   incomeperperson  190 non-null    float64\n",
            " 2   internetuserate  192 non-null    float64\n",
            " 3   urbanrate        203 non-null    float64\n",
            "dtypes: float64(3), object(1)\n",
            "memory usage: 6.8+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "ahm56X4qo9IX",
        "outputId": "e8118b0b-f7ab-42b3-de9b-58bad8b0453f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>incomeperperson</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>internetuserate</th>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>urbanrate</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table><br><label><b>dtype:</b> int64</label>"
            ],
            "text/plain": [
              "country             0\n",
              "incomeperperson    23\n",
              "internetuserate    21\n",
              "urbanrate          10\n",
              "dtype: int64"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XXcd8IX5pBFI",
        "outputId": "64351bb2-3c87-455c-adff-e3aa4265861f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(213, 4)\n"
          ]
        }
      ],
      "source": [
        "shape=df.shape\n",
        "print(shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eM7q58w1qozK",
        "outputId": "f2e0f025-93c7-4c8e-9862-4d310cac2ede"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "country                    NaN\n",
            "incomeperperson    8740.966076\n",
            "internetuserate      35.632716\n",
            "urbanrate            56.769360\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "df_numeric = df.apply(pd.to_numeric, errors='coerce')\n",
        "df_mean = df_numeric.mean()\n",
        "print(df_mean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "7q9I3IOVrLs4",
        "outputId": "ec6ce0a5-5b8a-4a86-b917-61553a3062f5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 213,\n  \"fields\": [\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 213,\n        \"samples\": [\n          \"Australia\",\n          \"Turkmenistan\",\n          \"Gabon\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"incomeperperson\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14262.809082891312,\n        \"min\": 103.7758572,\n        \"max\": 105147.4377,\n        \"num_unique_values\": 190,\n        \"samples\": [\n          31993.20069,\n          33945.31442,\n          4189.436587\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"internetuserate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.780284580956994,\n        \"min\": 0.210066326,\n        \"max\": 95.63811321,\n        \"num_unique_values\": 192,\n        \"samples\": [\n          9.549930701,\n          51.2804784,\n          20.00171014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"urbanrate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 100.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-73c6bdcb-02fc-43ee-9822-339f49dc82a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>incomeperperson</th>\n",
              "      <th>internetuserate</th>\n",
              "      <th>urbanrate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>103.775857</td>\n",
              "      <td>0.210066</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Albania</td>\n",
              "      <td>115.305996</td>\n",
              "      <td>0.720009</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>131.796207</td>\n",
              "      <td>0.749996</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Andorra</td>\n",
              "      <td>155.033231</td>\n",
              "      <td>0.829997</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Angola</td>\n",
              "      <td>161.317137</td>\n",
              "      <td>0.999959</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>Vietnam</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>209</th>\n",
              "      <td>West Bank and Gaza</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>210</th>\n",
              "      <td>Yemen, Rep.</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>211</th>\n",
              "      <td>Zambia</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>212</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>213 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-73c6bdcb-02fc-43ee-9822-339f49dc82a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-73c6bdcb-02fc-43ee-9822-339f49dc82a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-73c6bdcb-02fc-43ee-9822-339f49dc82a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-570c3f73-2583-4ee9-bdc9-1ee7016b91d6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-570c3f73-2583-4ee9-bdc9-1ee7016b91d6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-570c3f73-2583-4ee9-bdc9-1ee7016b91d6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                country  incomeperperson  internetuserate  urbanrate\n",
              "0           Afghanistan       103.775857         0.210066      100.0\n",
              "1               Albania       115.305996         0.720009        NaN\n",
              "2               Algeria       131.796207         0.749996        NaN\n",
              "3               Andorra       155.033231         0.829997        NaN\n",
              "4                Angola       161.317137         0.999959        NaN\n",
              "..                  ...              ...              ...        ...\n",
              "208             Vietnam              NaN              NaN        NaN\n",
              "209  West Bank and Gaza              NaN              NaN        NaN\n",
              "210         Yemen, Rep.              NaN              NaN        NaN\n",
              "211              Zambia              NaN              NaN        NaN\n",
              "212            Zimbabwe              NaN              NaN        NaN\n",
              "\n",
              "[213 rows x 4 columns]"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.mode()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1IZeiBDjrSc2",
        "outputId": "b80a6950-975b-4a6e-cd36-f5636e4e07e5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                 country  incomeperperson  internetuserate  urbanrate\n",
            "1                Albania      1914.996551        44.989947      46.72\n",
            "2                Algeria      2231.993335        12.500073      65.22\n",
            "3                Andorra     21943.339900        81.000000      88.92\n",
            "4                 Angola      1381.004268         9.999954      56.70\n",
            "5    Antigua and Barbuda     11894.464070        80.645455      30.46\n",
            "..                   ...              ...              ...        ...\n",
            "207            Venezuela      5528.363114        35.850437      93.32\n",
            "208              Vietnam       722.807559        27.851822      27.84\n",
            "210          Yemen, Rep.       610.357367        12.349750      30.64\n",
            "211               Zambia       432.226337        10.124986      35.42\n",
            "212             Zimbabwe       320.771890        11.500415      37.34\n",
            "\n",
            "[182 rows x 4 columns]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "data=pd.read_csv('/content/internet dataset.zip')\n",
        "df=pd.DataFrame(data)\n",
        "df_drop=df.dropna()\n",
        "print(df_drop)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dZ6XPalcrgwu",
        "outputId": "667620db-45b4-40cc-9598-f704a255b7f1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                 country  incomeperperson  internetuserate  urbanrate\n",
            "1                Albania      1914.996551        44.989947      46.72\n",
            "2                Algeria      2231.993335        12.500073      65.22\n",
            "3                Andorra     21943.339900        81.000000      88.92\n",
            "4                 Angola      1381.004268         9.999954      56.70\n",
            "5    Antigua and Barbuda     11894.464070        80.645455      30.46\n",
            "..                   ...              ...              ...        ...\n",
            "207            Venezuela      5528.363114        35.850437      93.32\n",
            "208              Vietnam       722.807559        27.851822      27.84\n",
            "210          Yemen, Rep.       610.357367        12.349750      30.64\n",
            "211               Zambia       432.226337        10.124986      35.42\n",
            "212             Zimbabwe       320.771890        11.500415      37.34\n",
            "\n",
            "[182 rows x 4 columns]\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna()\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pYlfiCy4rs9H"
      },
      "outputs": [],
      "source": [
        "colum"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "07zVNmamrode",
        "outputId": "c2812712-71e2-4aaf-d563-1d95184bb95e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                country\n",
            "0           Afghanistan\n",
            "1               Albania\n",
            "2               Algeria\n",
            "3               Andorra\n",
            "4                Angola\n",
            "..                  ...\n",
            "208             Vietnam\n",
            "209  West Bank and Gaza\n",
            "210         Yemen, Rep.\n",
            "211              Zambia\n",
            "212            Zimbabwe\n",
            "\n",
            "[213 rows x 1 columns]\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna(axis=1)\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CWfnHu7_r83F",
        "outputId": "fa66dec1-1fe1-442b-85fc-4bd4e43f215b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                 country  incomeperperson  internetuserate  urbanrate\n",
            "1                Albania      1914.996551        44.989947      46.72\n",
            "2                Algeria      2231.993335        12.500073      65.22\n",
            "3                Andorra     21943.339900        81.000000      88.92\n",
            "4                 Angola      1381.004268         9.999954      56.70\n",
            "5    Antigua and Barbuda     11894.464070        80.645455      30.46\n",
            "..                   ...              ...              ...        ...\n",
            "207            Venezuela      5528.363114        35.850437      93.32\n",
            "208              Vietnam       722.807559        27.851822      27.84\n",
            "210          Yemen, Rep.       610.357367        12.349750      30.64\n",
            "211               Zambia       432.226337        10.124986      35.42\n",
            "212             Zimbabwe       320.771890        11.500415      37.34\n",
            "\n",
            "[189 rows x 4 columns]\n"
          ]
        }
      ],
      "source": [
        "df_clean=df.dropna(subset=['urbanrate', 'country','incomeperperson'])\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "af8z_DSfs671"
      },
      "source": [
        "univariate\n",
        "Z-core"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kcb6Hrz1swX3",
        "outputId": "2a334d77-7b29-47a5-a7ef-5b4c20c1fe06"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Empty DataFrame\n",
            "Columns: [country, incomeperperson, internetuserate, urbanrate]\n",
            "Index: []\n"
          ]
        }
      ],
      "source": [
        "df=pd.read_csv('/content/internet dataset.zip')\n",
        "df_clean=df.dropna(axis=0,thresh=len(df)*5)\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xmIWspjEtszE"
      },
      "source": [
        "estimate"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pFsNNjAutTzk",
        "outputId": "dc4cb330-32ab-4658-a833-a4ac05540e6f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                country  incomeperperson  internetuserate  urbanrate\n",
            "0           Afghanistan      8740.966076         3.654122      24.04\n",
            "1               Albania      1914.996551        44.989947      46.72\n",
            "2               Algeria      2231.993335        12.500073      65.22\n",
            "3               Andorra     21943.339900        81.000000      88.92\n",
            "4                Angola      1381.004268         9.999954      56.70\n",
            "..                  ...              ...              ...        ...\n",
            "208             Vietnam       722.807559        27.851822      27.84\n",
            "209  West Bank and Gaza      8740.966076        36.422772      71.90\n",
            "210         Yemen, Rep.       610.357367        12.349750      30.64\n",
            "211              Zambia       432.226337        10.124986      35.42\n",
            "212            Zimbabwe       320.771890        11.500415      37.34\n",
            "\n",
            "[213 rows x 4 columns]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "df = pd.read_csv('/content/internet dataset.zip')\n",
        "numeric_columns = df.select_dtypes(include=['number']).columns\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "df_imputed = pd.DataFrame(imputer.fit_transform(df[numeric_columns]), columns=numeric_columns)\n",
        "df_clean = pd.concat([df.drop(numeric_columns, axis=1), df_imputed], axis=1)\n",
        "print(df_clean)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MpDgATmBzaFK"
      },
      "source": [
        "sales dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2F5IwW9GzcJP"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w6xKKVfU0AXv",
        "outputId": "62d45f25-7a51-4744-b05b-c73402e74022"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "      ORDERNUMBER  QUANTITYORDERED  PRICEEACH  ORDERLINENUMBER    SALES  \\\n",
            "0           10107               30      95.70                2  2871.00   \n",
            "1           10121               34      81.35                5  2765.90   \n",
            "2           10134               41      94.74                2  3884.34   \n",
            "3           10145               45      83.26                6  3746.70   \n",
            "4           10159               49     100.00               14  5205.27   \n",
            "...           ...              ...        ...              ...      ...   \n",
            "2818        10350               20     100.00               15  2244.40   \n",
            "2819        10373               29     100.00                1  3978.51   \n",
            "2820        10386               43     100.00                4  5417.57   \n",
            "2821        10397               34      62.24                1  2116.16   \n",
            "2822        10414               47      65.52                9  3079.44   \n",
            "\n",
            "            ORDERDATE    STATUS  QTR_ID  MONTH_ID  YEAR_ID  ...  \\\n",
            "0      2/24/2003 0:00   Shipped       1         2     2003  ...   \n",
            "1       5/7/2003 0:00   Shipped       2         5     2003  ...   \n",
            "2       7/1/2003 0:00   Shipped       3         7     2003  ...   \n",
            "3      8/25/2003 0:00   Shipped       3         8     2003  ...   \n",
            "4     10/10/2003 0:00   Shipped       4        10     2003  ...   \n",
            "...               ...       ...     ...       ...      ...  ...   \n",
            "2818   12/2/2004 0:00   Shipped       4        12     2004  ...   \n",
            "2819   1/31/2005 0:00   Shipped       1         1     2005  ...   \n",
            "2820    3/1/2005 0:00  Resolved       1         3     2005  ...   \n",
            "2821   3/28/2005 0:00   Shipped       1         3     2005  ...   \n",
            "2822    5/6/2005 0:00   On Hold       2         5     2005  ...   \n",
            "\n",
            "                       ADDRESSLINE1  ADDRESSLINE2           CITY STATE  \\\n",
            "0           897 Long Airport Avenue           NaN            NYC    NY   \n",
            "1                59 rue de l'Abbaye           NaN          Reims   NaN   \n",
            "2     27 rue du Colonel Pierre Avia           NaN          Paris   NaN   \n",
            "3                78934 Hillside Dr.           NaN       Pasadena    CA   \n",
            "4                   7734 Strong St.           NaN  San Francisco    CA   \n",
            "...                             ...           ...            ...   ...   \n",
            "2818             C/ Moralzarzal, 86           NaN         Madrid   NaN   \n",
            "2819                    Torikatu 38           NaN           Oulu   NaN   \n",
            "2820             C/ Moralzarzal, 86           NaN         Madrid   NaN   \n",
            "2821          1 rue Alsace-Lorraine           NaN       Toulouse   NaN   \n",
            "2822             8616 Spinnaker Dr.           NaN         Boston    MA   \n",
            "\n",
            "     POSTALCODE  COUNTRY TERRITORY CONTACTLASTNAME CONTACTFIRSTNAME DEALSIZE  \n",
            "0         10022      USA       NaN              Yu             Kwai    Small  \n",
            "1         51100   France      EMEA         Henriot             Paul    Small  \n",
            "2         75508   France      EMEA        Da Cunha           Daniel   Medium  \n",
            "3         90003      USA       NaN           Young            Julie   Medium  \n",
            "4           NaN      USA       NaN           Brown            Julie   Medium  \n",
            "...         ...      ...       ...             ...              ...      ...  \n",
            "2818      28034    Spain      EMEA          Freyre            Diego    Small  \n",
            "2819      90110  Finland      EMEA       Koskitalo           Pirkko   Medium  \n",
            "2820      28034    Spain      EMEA          Freyre            Diego   Medium  \n",
            "2821      31000   France      EMEA          Roulet          Annette    Small  \n",
            "2822      51003      USA       NaN         Yoshido             Juri   Medium  \n",
            "\n",
            "[2823 rows x 25 columns]\n"
          ]
        }
      ],
      "source": [
        "path='/content/sales dataset.zip'\n",
        "df_sales=pd.read_csv(path,encoding='latin-1')\n",
        "print(df_sales)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KaxRlcDA--wf"
      },
      "source": [
        "customer dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VwTIvBDN4wtt",
        "outputId": "ebc7cc18-097e-438a-fbd2-f8b2f189b1cf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "     CustomerID   Genre  Age  Annual_Income_(k$)  Spending_Score\n",
            "0             1    Male   19                  15              39\n",
            "1             2    Male   21                  15              81\n",
            "2             3  Female   20                  16               6\n",
            "3             4  Female   23                  16              77\n",
            "4             5  Female   31                  17              40\n",
            "..          ...     ...  ...                 ...             ...\n",
            "195         196  Female   35                 120              79\n",
            "196         197  Female   45                 126              28\n",
            "197         198    Male   32                 126              74\n",
            "198         199    Male   32                 137              18\n",
            "199         200    Male   30                 137              83\n",
            "\n",
            "[200 rows x 5 columns]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "path='/content/customer dataset.zip'\n",
        "df=pd.read_csv(path,encoding='latin-1')\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ghed_jk26yWc"
      },
      "source": [
        "numeriosity"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ezv1OAUk61Z7",
        "outputId": "7a2111f7-7c53-4484-f501-e55eb8a2cfd3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "        ORDERNUMBER  QUANTITYORDERED    PRICEEACH  ORDERLINENUMBER  \\\n",
            "count   2823.000000      2823.000000  2823.000000      2823.000000   \n",
            "mean   10258.725115        35.092809    83.658544         6.466171   \n",
            "std       92.085478         9.741443    20.174277         4.225841   \n",
            "min    10100.000000         6.000000    26.880000         1.000000   \n",
            "25%    10180.000000        27.000000    68.860000         3.000000   \n",
            "50%    10262.000000        35.000000    95.700000         6.000000   \n",
            "75%    10333.500000        43.000000   100.000000         9.000000   \n",
            "max    10425.000000        97.000000   100.000000        18.000000   \n",
            "\n",
            "              SALES       QTR_ID     MONTH_ID     YEAR_ID         MSRP  \n",
            "count   2823.000000  2823.000000  2823.000000  2823.00000  2823.000000  \n",
            "mean    3553.889072     2.717676     7.092455  2003.81509   100.715551  \n",
            "std     1841.865106     1.203878     3.656633     0.69967    40.187912  \n",
            "min      482.130000     1.000000     1.000000  2003.00000    33.000000  \n",
            "25%     2203.430000     2.000000     4.000000  2003.00000    68.000000  \n",
            "50%     3184.800000     3.000000     8.000000  2004.00000    99.000000  \n",
            "75%     4508.000000     4.000000    11.000000  2004.00000   124.000000  \n",
            "max    14082.800000     4.000000    12.000000  2005.00000   214.000000  \n",
            "QUANTITYORDERED    35.092809\n",
            "dtype: float64\n",
            "9.741442737069592\n",
            "0\n",
            "-0.018396655216477334\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "path='/content/sales dataset.zip'\n",
        "df=pd.read_csv(path,encoding='latin-1')\n",
        "print(df.describe())\n",
        "mean_value=df[['QUANTITYORDERED']].mean()\n",
        "print(mean_value)\n",
        "std_dev=df['QUANTITYORDERED'].std()\n",
        "print(std_dev)\n",
        "missing_values=df['QUANTITYORDERED'].isnull().sum()\n",
        "print(missing_values)\n",
        "correlation=df['QUANTITYORDERED'].corr(df['ORDERLINENUMBER'])\n",
        "print(correlation)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uFfSK3_n_1LA",
        "outputId": "1c214584-25f6-4d29-abb7-6fe31e55e5da"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "       CustomerID         Age  Annual_Income_(k$)  Spending_Score\n",
            "count  200.000000  200.000000          200.000000      200.000000\n",
            "mean   100.500000   38.850000           60.560000       50.200000\n",
            "std     57.879185   13.969007           26.264721       25.823522\n",
            "min      1.000000   18.000000           15.000000        1.000000\n",
            "25%     50.750000   28.750000           41.500000       34.750000\n",
            "50%    100.500000   36.000000           61.500000       50.000000\n",
            "75%    150.250000   49.000000           78.000000       73.000000\n",
            "max    200.000000   70.000000          137.000000       99.000000\n",
            "CustomerID    100.5\n",
            "dtype: float64\n",
            "57.879184513951124\n",
            "0\n",
            "1.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "path='/content/customer dataset.zip'\n",
        "df=pd.read_csv(path,encoding='latin-1')\n",
        "print(df.describe())\n",
        "mean_value=df[['CustomerID']].mean()\n",
        "print(mean_value)\n",
        "std_dev=df['CustomerID'].std()\n",
        "print(std_dev)\n",
        "missing_values=df['CustomerID'].isnull().sum()\n",
        "print(missing_values)\n",
        "correlation=df['CustomerID'].corr(df['CustomerID'])\n",
        "print(correlation)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oC3RrF2u_c7C"
      },
      "source": [
        "feature selection(dimention)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "FE8bE_BSAqww",
        "outputId": "c0e90b95-0526-4eb9-e6ce-44c522f85186"
      },
      "outputs": [
        {
          "ename": "ValueError",
          "evalue": "could not convert string to float: '2/24/2003 0:00'",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-a1f5111e2f27>\u001b[0m in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mselector\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mSelectKBest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf_classif\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mx_selected\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mselected_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mselector\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_support\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"selected_features:\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mselected_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_set_output.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[1;32m    155\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    156\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 157\u001b[0;31m         \u001b[0mdata_to_wrap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    158\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_to_wrap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m             \u001b[0;31m# only wrap the first output for cross decomposition\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    917\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    918\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 919\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    920\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    921\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1150\u001b[0m                 )\n\u001b[1;32m   1151\u001b[0m             ):\n\u001b[0;32m-> 1152\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_univariate_selection.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    496\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0mthe\u001b[0m \u001b[0minstance\u001b[0m \u001b[0mitself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    497\u001b[0m         \"\"\"\n\u001b[0;32m--> 498\u001b[0;31m         X, y = self._validate_data(\n\u001b[0m\u001b[1;32m    499\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    500\u001b[0m         )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001b[0m\n\u001b[1;32m    620\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    621\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 622\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    623\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    624\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1144\u001b[0m         )\n\u001b[1;32m   1145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1146\u001b[0;31m     X = check_array(\n\u001b[0m\u001b[1;32m   1147\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1148\u001b[0m         \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    913\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_asarray_with_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m                 raise ValueError(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_array_api.py\u001b[0m in \u001b[0;36m_asarray_with_order\u001b[0;34m(array, dtype, order, copy, xp)\u001b[0m\n\u001b[1;32m    378\u001b[0m             \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    379\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 380\u001b[0;31m             \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    381\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    382\u001b[0m         \u001b[0;31m# At this point array is a NumPy ndarray. We convert it to an array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   2082\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnpt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDTypeLike\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2083\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2084\u001b[0;31m         \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2085\u001b[0m         if (\n\u001b[1;32m   2086\u001b[0m             \u001b[0mastype_is_view\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: '2/24/2003 0:00'"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "path='/content/sales dataset.zip'\n",
        "df=pd.read_csv(path,encoding='latin-1')\n",
        "fro\n",
        "y=df['ORDERLINENUMBER']\n",
        "x=df.drop('ORDERLINENUMBER',axis=1)\n",
        "k=10\n",
        "selector=SelectKBest(f_classif,k=k)\n",
        "x_selected=selector.fit_transform(x,y)\n",
        "selected_features=x.columns[selector.get_support()]\n",
        "print(\"selected_features:\",selected_features)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7LlDY5UuNtuw"
      },
      "source": [
        "pca"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 611
        },
        "id": "-QHrfF9AOaGo",
        "outputId": "fd6f4c2b-96a1-44b8-d96e-95315c645079"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Index(['ORDERNUMBER', 'QUANTITYORDERED', 'PRICEEACH', 'ORDERLINENUMBER',\n",
            "       'SALES', 'ORDERDATE', 'STATUS', 'QTR_ID', 'MONTH_ID', 'YEAR_ID',\n",
            "       'PRODUCTLINE', 'MSRP', 'PRODUCTCODE', 'CUSTOMERNAME', 'PHONE',\n",
            "       'ADDRESSLINE1', 'ADDRESSLINE2', 'CITY', 'STATE', 'POSTALCODE',\n",
            "       'COUNTRY', 'TERRITORY', 'CONTACTLASTNAME', 'CONTACTFIRSTNAME',\n",
            "       'DEALSIZE'],\n",
            "      dtype='object')\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[0.84168742 0.15831258]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "path = '/content/sales dataset.zip'\n",
        "df = pd.read_csv(path, encoding='latin-1')\n",
        "print(df.columns)\n",
        "features = df[['QUANTITYORDERED','ORDERLINENUMBER']]\n",
        "pca = PCA(n_components=2)\n",
        "principal_components = pca.fit_transform(features)\n",
        "principal_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])\n",
        "plt.scatter(principal_df['PC1'], principal_df['PC2'])\n",
        "plt.xlabel('PC1')\n",
        "plt.ylabel('PC2')\n",
        "plt.title('PCA')\n",
        "plt.show()\n",
        "print(pca.explained_variance_ratio_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "X3JjlBVzQZEW",
        "outputId": "540fcdf1-544d-46e9-86df-8221766c4493"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Index(['CustomerID', 'Genre', 'Age', 'Annual_Income_(k$)', 'Spending_Score'], dtype='object')\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[0.85291693 0.14165432]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "path = '/content/customer dataset.zip'\n",
        "df = pd.read_csv(path, encoding='latin-1')\n",
        "print(df.columns)\n",
        "features = df[['CustomerID', 'Annual_Income_(k$)',  'Spending_Score']]\n",
        "pca = PCA(n_components=2)\n",
        "principal_components = pca.fit_transform(features)\n",
        "principal_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])\n",
        "plt.scatter(principal_df['PC1'], principal_df['PC2'])\n",
        "plt.xlabel('PC1')\n",
        "plt.ylabel('PC2')\n",
        "plt.title('PCA')\n",
        "plt.show()\n",
        "print(pca.explained_variance_ratio_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XnWSyJA7TruT"
      },
      "source": [
        "LDA\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vuqkIqDZb-3p",
        "outputId": "2ea1f58e-7b5e-49e5-9d23-53450e38913b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "     CustomerID   Genre  Age  Annual_Income_(k$)  Spending_Score\n",
            "0             1    Male   19                  15              39\n",
            "1             2    Male   21                  15              81\n",
            "2             3  Female   20                  16               6\n",
            "3             4  Female   23                  16              77\n",
            "4             5  Female   31                  17              40\n",
            "..          ...     ...  ...                 ...             ...\n",
            "195         196  Female   35                 120              79\n",
            "196         197  Female   45                 126              28\n",
            "197         198    Male   32                 126              74\n",
            "198         199    Male   32                 137              18\n",
            "199         200    Male   30                 137              83\n",
            "\n",
            "[200 rows x 5 columns]\n",
            "Accuracy: 0.0\n",
            "Classification Report\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.00      0.00      0.00       1.0\n",
            "           4       0.00      0.00      0.00       1.0\n",
            "           5       0.00      0.00      0.00       0.0\n",
            "          10       0.00      0.00      0.00       0.0\n",
            "          11       0.00      0.00      0.00       1.0\n",
            "          13       0.00      0.00      0.00       2.0\n",
            "          15       0.00      0.00      0.00       1.0\n",
            "          16       0.00      0.00      0.00       0.0\n",
            "          17       0.00      0.00      0.00       1.0\n",
            "          20       0.00      0.00      0.00       1.0\n",
            "          22       0.00      0.00      0.00       1.0\n",
            "          24       0.00      0.00      0.00       1.0\n",
            "          26       0.00      0.00      0.00       1.0\n",
            "          29       0.00      0.00      0.00       2.0\n",
            "          34       0.00      0.00      0.00       1.0\n",
            "          35       0.00      0.00      0.00       1.0\n",
            "          40       0.00      0.00      0.00       1.0\n",
            "          41       0.00      0.00      0.00       2.0\n",
            "          42       0.00      0.00      0.00       0.0\n",
            "          43       0.00      0.00      0.00       0.0\n",
            "          46       0.00      0.00      0.00       0.0\n",
            "          47       0.00      0.00      0.00       1.0\n",
            "          48       0.00      0.00      0.00       1.0\n",
            "          50       0.00      0.00      0.00       3.0\n",
            "          52       0.00      0.00      0.00       2.0\n",
            "          53       0.00      0.00      0.00       1.0\n",
            "          54       0.00      0.00      0.00       1.0\n",
            "          55       0.00      0.00      0.00       0.0\n",
            "          56       0.00      0.00      0.00       2.0\n",
            "          57       0.00      0.00      0.00       1.0\n",
            "          59       0.00      0.00      0.00       2.0\n",
            "          65       0.00      0.00      0.00       1.0\n",
            "          69       0.00      0.00      0.00       1.0\n",
            "          72       0.00      0.00      0.00       1.0\n",
            "          73       0.00      0.00      0.00       1.0\n",
            "          75       0.00      0.00      0.00       1.0\n",
            "          77       0.00      0.00      0.00       1.0\n",
            "          79       0.00      0.00      0.00       1.0\n",
            "          86       0.00      0.00      0.00       0.0\n",
            "          88       0.00      0.00      0.00       1.0\n",
            "          90       0.00      0.00      0.00       0.0\n",
            "          92       0.00      0.00      0.00       0.0\n",
            "\n",
            "    accuracy                           0.00      40.0\n",
            "   macro avg       0.00      0.00      0.00      40.0\n",
            "weighted avg       0.00      0.00      0.00      40.0\n",
            "\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score,classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "path='/content/customer dataset.zip'\n",
        "df=pd.read_csv(path,encoding='latin-1')\n",
        "print(df)\n",
        "le = LabelEncoder()\n",
        "df['Genre'] = le.fit_transform(df['Genre'])\n",
        "x=df.drop('Spending_Score',axis=1)\n",
        "y=df['Spending_Score']\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n",
        "lda=LinearDiscriminantAnalysis()\n",
        "lda.fit(x_train,y_train)\n",
        "\n",
        "x_train_lda=lda.transform(x_train)\n",
        "x_test_lda=lda.transform(x_test)\n",
        "\n",
        "classifier=LogisticRegression()\n",
        "classifier.fit(x_train_lda,y_train)\n",
        "y_pred=classifier.predict(x_test_lda)\n",
        "print(\"Accuracy:\",accuracy_score(y_test,y_pred))\n",
        "print(\"Classification Report\")\n",
        "print(classification_report(y_test,y_pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L_BMAVtycTKt",
        "outputId": "aa7092d9-d540-496b-a24a-fc8309468d57"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "      ORDERNUMBER  QUANTITYORDERED  PRICEEACH  ORDERLINENUMBER    SALES  \\\n",
            "0           10107               30      95.70                2  2871.00   \n",
            "1           10121               34      81.35                5  2765.90   \n",
            "2           10134               41      94.74                2  3884.34   \n",
            "3           10145               45      83.26                6  3746.70   \n",
            "4           10159               49     100.00               14  5205.27   \n",
            "...           ...              ...        ...              ...      ...   \n",
            "2818        10350               20     100.00               15  2244.40   \n",
            "2819        10373               29     100.00                1  3978.51   \n",
            "2820        10386               43     100.00                4  5417.57   \n",
            "2821        10397               34      62.24                1  2116.16   \n",
            "2822        10414               47      65.52                9  3079.44   \n",
            "\n",
            "            ORDERDATE    STATUS  QTR_ID  MONTH_ID  YEAR_ID  ...  \\\n",
            "0      2/24/2003 0:00   Shipped       1         2     2003  ...   \n",
            "1       5/7/2003 0:00   Shipped       2         5     2003  ...   \n",
            "2       7/1/2003 0:00   Shipped       3         7     2003  ...   \n",
            "3      8/25/2003 0:00   Shipped       3         8     2003  ...   \n",
            "4     10/10/2003 0:00   Shipped       4        10     2003  ...   \n",
            "...               ...       ...     ...       ...      ...  ...   \n",
            "2818   12/2/2004 0:00   Shipped       4        12     2004  ...   \n",
            "2819   1/31/2005 0:00   Shipped       1         1     2005  ...   \n",
            "2820    3/1/2005 0:00  Resolved       1         3     2005  ...   \n",
            "2821   3/28/2005 0:00   Shipped       1         3     2005  ...   \n",
            "2822    5/6/2005 0:00   On Hold       2         5     2005  ...   \n",
            "\n",
            "                       ADDRESSLINE1  ADDRESSLINE2           CITY STATE  \\\n",
            "0           897 Long Airport Avenue           NaN            NYC    NY   \n",
            "1                59 rue de l'Abbaye           NaN          Reims   NaN   \n",
            "2     27 rue du Colonel Pierre Avia           NaN          Paris   NaN   \n",
            "3                78934 Hillside Dr.           NaN       Pasadena    CA   \n",
            "4                   7734 Strong St.           NaN  San Francisco    CA   \n",
            "...                             ...           ...            ...   ...   \n",
            "2818             C/ Moralzarzal, 86           NaN         Madrid   NaN   \n",
            "2819                    Torikatu 38           NaN           Oulu   NaN   \n",
            "2820             C/ Moralzarzal, 86           NaN         Madrid   NaN   \n",
            "2821          1 rue Alsace-Lorraine           NaN       Toulouse   NaN   \n",
            "2822             8616 Spinnaker Dr.           NaN         Boston    MA   \n",
            "\n",
            "     POSTALCODE  COUNTRY TERRITORY CONTACTLASTNAME CONTACTFIRSTNAME DEALSIZE  \n",
            "0         10022      USA       NaN              Yu             Kwai    Small  \n",
            "1         51100   France      EMEA         Henriot             Paul    Small  \n",
            "2         75508   France      EMEA        Da Cunha           Daniel   Medium  \n",
            "3         90003      USA       NaN           Young            Julie   Medium  \n",
            "4           NaN      USA       NaN           Brown            Julie   Medium  \n",
            "...         ...      ...       ...             ...              ...      ...  \n",
            "2818      28034    Spain      EMEA          Freyre            Diego    Small  \n",
            "2819      90110  Finland      EMEA       Koskitalo           Pirkko   Medium  \n",
            "2820      28034    Spain      EMEA          Freyre            Diego   Medium  \n",
            "2821      31000   France      EMEA          Roulet          Annette    Small  \n",
            "2822      51003      USA       NaN         Yoshido             Juri   Medium  \n",
            "\n",
            "[2823 rows x 25 columns]\n",
            "Non-numeric columns: Index(['ORDERDATE', 'STATUS', 'PRODUCTLINE', 'PRODUCTCODE', 'CUSTOMERNAME',\n",
            "       'PHONE', 'ADDRESSLINE1', 'ADDRESSLINE2', 'CITY', 'STATE', 'POSTALCODE',\n",
            "       'COUNTRY', 'TERRITORY', 'CONTACTLASTNAME', 'CONTACTFIRSTNAME',\n",
            "       'DEALSIZE'],\n",
            "      dtype='object')\n",
            "Accuracy: 0.09734513274336283\n",
            "Classification Report\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.11      0.51      0.18        59\n",
            "           2       0.09      0.24      0.13        59\n",
            "           3       0.11      0.11      0.11        61\n",
            "           4       0.10      0.02      0.03        57\n",
            "           5       0.04      0.04      0.04        45\n",
            "           6       0.25      0.02      0.04        51\n",
            "           7       0.00      0.00      0.00        37\n",
            "           8       0.00      0.00      0.00        35\n",
            "           9       0.00      0.00      0.00        30\n",
            "          10       0.00      0.00      0.00        26\n",
            "          11       0.00      0.00      0.00        27\n",
            "          12       0.00      0.00      0.00        22\n",
            "          13       0.00      0.00      0.00        19\n",
            "          14       0.00      0.00      0.00        10\n",
            "          15       0.00      0.00      0.00        13\n",
            "          16       0.00      0.00      0.00         6\n",
            "          17       0.00      0.00      0.00         5\n",
            "          18       0.00      0.00      0.00         3\n",
            "\n",
            "    accuracy                           0.10       565\n",
            "   macro avg       0.04      0.05      0.03       565\n",
            "weighted avg       0.07      0.10      0.05       565\n",
            "\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import pandas as pd\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score,classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "path='/content/sales dataset.zip'\n",
        "df=pd.read_csv(path,encoding='latin-1')\n",
        "print(df)\n",
        "non_numeric_cols = df.select_dtypes(exclude=['number']).columns\n",
        "print(\"Non-numeric columns:\", non_numeric_cols)\n",
        "df_numeric = df.drop(non_numeric_cols, axis=1)\n",
        "le = LabelEncoder()\n",
        "df_numeric['QUANTITYORDERED'] = le.fit_transform(df_numeric['QUANTITYORDERED'])  # Use df_numeric if you dropped non-numeric columns\n",
        "x=df_numeric.drop('ORDERLINENUMBER',axis=1)  # Use df_numeric if you dropped non-numeric columns\n",
        "y=df_numeric['ORDERLINENUMBER']  # Use df_numeric if you dropped non-numeric columns\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n",
        "lda=LinearDiscriminantAnalysis()\n",
        "lda.fit(x_train,y_train)\n",
        "x_train_lda=lda.transform(x_train)\n",
        "x_test_lda=lda.transform(x_test)\n",
        "\n",
        "classifier=LogisticRegression()\n",
        "classifier.fit(x_train_lda,y_train)\n",
        "y_pred=classifier.predict(x_test_lda)\n",
        "print(\"Accuracy:\",accuracy_score(y_test,y_pred))\n",
        "print(\"Classification Report\")\n",
        "print(classification_report(y_test,y_pred))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yZpkmRqjmWiG"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "udvoLpUkmami"
      },
      "source": [
        "T-SNE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 958
        },
        "id": "VIzFjnbVdX3y",
        "outputId": "349515b2-01e0-4b80-d4ef-d175598beac1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "     CustomerID   Genre  Age  Annual_Income_(k$)  Spending_Score\n",
            "0             1    Male   19                  15              39\n",
            "1             2    Male   21                  15              81\n",
            "2             3  Female   20                  16               6\n",
            "3             4  Female   23                  16              77\n",
            "4             5  Female   31                  17              40\n",
            "..          ...     ...  ...                 ...             ...\n",
            "195         196  Female   35                 120              79\n",
            "196         197  Female   45                 126              28\n",
            "197         198    Male   32                 126              74\n",
            "198         199    Male   32                 137              18\n",
            "199         200    Male   30                 137              83\n",
            "\n",
            "[200 rows x 5 columns]\n",
            "     Dimension1  Dimension2\n",
            "0    -13.794547    1.973517\n",
            "1    -13.613491    5.978308\n",
            "2    -14.405545    0.321843\n",
            "3    -13.588204    5.562573\n",
            "4    -13.574647    1.637083\n",
            "..          ...         ...\n",
            "195   15.631249   -1.822977\n",
            "196   12.741072    4.441153\n",
            "197   15.713623   -1.441363\n",
            "198   13.066395    4.789050\n",
            "199   16.130520   -1.647847\n",
            "\n",
            "[200 rows x 2 columns]\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.manifold import TSNE\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.impute import SimpleImputer\n",
        "path='/content/customer dataset.zip'\n",
        "df=pd.read_csv(path,encoding='latin-1')\n",
        "print(df)\n",
        "numeric_df=df.select_dtypes(include=['number'])\n",
        "imputer=SimpleImputer(strategy='mean')\n",
        "numeric_df_imputed=pd.DataFrame(imputer.fit_transform(numeric_df))\n",
        "tsne=TSNE(n_components=2,random_state=42)\n",
        "reduced_data=tsne.fit_transform(numeric_df_imputed)\n",
        "reduced_df=pd.DataFrame(reduced_data,columns=['Dimension1','Dimension2'])\n",
        "print(reduced_df)\n",
        "plt.scatter(reduced_df['Dimension1'],reduced_df['Dimension2'])\n",
        "plt.xlabel('Dimension1')\n",
        "plt.ylabel('Dimension2')\n",
        "plt.title('T-SNE')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R-MieNM1ol3l"
      },
      "source": [
        "merge"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Wr0J4lnBoktL",
        "outputId": "0811ebe9-335a-4f5e-a261-c34ec07004fd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "     CustomerID   Genre  Age  Annual_Income_(k$)  Spending_Score\n",
            "0             1    Male   19                  15              39\n",
            "1             2    Male   21                  15              81\n",
            "2             3  Female   20                  16               6\n",
            "3             4  Female   23                  16              77\n",
            "4             5  Female   31                  17              40\n",
            "..          ...     ...  ...                 ...             ...\n",
            "195         196  Female   35                 120              79\n",
            "196         197  Female   45                 126              28\n",
            "197         198    Male   32                 126              74\n",
            "198         199    Male   32                 137              18\n",
            "199         200    Male   30                 137              83\n",
            "\n",
            "[200 rows x 5 columns]\n",
            "      ORDERNUMBER  QUANTITYORDERED  PRICEEACH  ORDERLINENUMBER    SALES  \\\n",
            "0           10107               30      95.70                2  2871.00   \n",
            "1           10121               34      81.35                5  2765.90   \n",
            "2           10134               41      94.74                2  3884.34   \n",
            "3           10145               45      83.26                6  3746.70   \n",
            "4           10159               49     100.00               14  5205.27   \n",
            "...           ...              ...        ...              ...      ...   \n",
            "2818        10350               20     100.00               15  2244.40   \n",
            "2819        10373               29     100.00                1  3978.51   \n",
            "2820        10386               43     100.00                4  5417.57   \n",
            "2821        10397               34      62.24                1  2116.16   \n",
            "2822        10414               47      65.52                9  3079.44   \n",
            "\n",
            "            ORDERDATE    STATUS  QTR_ID  MONTH_ID  YEAR_ID  ...  \\\n",
            "0      2/24/2003 0:00   Shipped       1         2     2003  ...   \n",
            "1       5/7/2003 0:00   Shipped       2         5     2003  ...   \n",
            "2       7/1/2003 0:00   Shipped       3         7     2003  ...   \n",
            "3      8/25/2003 0:00   Shipped       3         8     2003  ...   \n",
            "4     10/10/2003 0:00   Shipped       4        10     2003  ...   \n",
            "...               ...       ...     ...       ...      ...  ...   \n",
            "2818   12/2/2004 0:00   Shipped       4        12     2004  ...   \n",
            "2819   1/31/2005 0:00   Shipped       1         1     2005  ...   \n",
            "2820    3/1/2005 0:00  Resolved       1         3     2005  ...   \n",
            "2821   3/28/2005 0:00   Shipped       1         3     2005  ...   \n",
            "2822    5/6/2005 0:00   On Hold       2         5     2005  ...   \n",
            "\n",
            "                       ADDRESSLINE1  ADDRESSLINE2           CITY STATE  \\\n",
            "0           897 Long Airport Avenue           NaN            NYC    NY   \n",
            "1                59 rue de l'Abbaye           NaN          Reims   NaN   \n",
            "2     27 rue du Colonel Pierre Avia           NaN          Paris   NaN   \n",
            "3                78934 Hillside Dr.           NaN       Pasadena    CA   \n",
            "4                   7734 Strong St.           NaN  San Francisco    CA   \n",
            "...                             ...           ...            ...   ...   \n",
            "2818             C/ Moralzarzal, 86           NaN         Madrid   NaN   \n",
            "2819                    Torikatu 38           NaN           Oulu   NaN   \n",
            "2820             C/ Moralzarzal, 86           NaN         Madrid   NaN   \n",
            "2821          1 rue Alsace-Lorraine           NaN       Toulouse   NaN   \n",
            "2822             8616 Spinnaker Dr.           NaN         Boston    MA   \n",
            "\n",
            "     POSTALCODE  COUNTRY TERRITORY CONTACTLASTNAME CONTACTFIRSTNAME DEALSIZE  \n",
            "0         10022      USA       NaN              Yu             Kwai    Small  \n",
            "1         51100   France      EMEA         Henriot             Paul    Small  \n",
            "2         75508   France      EMEA        Da Cunha           Daniel   Medium  \n",
            "3         90003      USA       NaN           Young            Julie   Medium  \n",
            "4           NaN      USA       NaN           Brown            Julie   Medium  \n",
            "...         ...      ...       ...             ...              ...      ...  \n",
            "2818      28034    Spain      EMEA          Freyre            Diego    Small  \n",
            "2819      90110  Finland      EMEA       Koskitalo           Pirkko   Medium  \n",
            "2820      28034    Spain      EMEA          Freyre            Diego   Medium  \n",
            "2821      31000   France      EMEA          Roulet          Annette    Small  \n",
            "2822      51003      USA       NaN         Yoshido             Juri   Medium  \n",
            "\n",
            "[2823 rows x 25 columns]\n"
          ]
        },
        {
          "ename": "KeyError",
          "evalue": "'CustomerID'",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-111-61d18678b9ed>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'latin-1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mmerged_df\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'CustomerID'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerged_df\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mmerged_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'merged_dataset.csv'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mmerge\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    167\u001b[0m         )\n\u001b[1;32m    168\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 169\u001b[0;31m         op = _MergeOperation(\n\u001b[0m\u001b[1;32m    170\u001b[0m             \u001b[0mleft_df\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    171\u001b[0m             \u001b[0mright_df\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, indicator, validate)\u001b[0m\n\u001b[1;32m    789\u001b[0m             \u001b[0mleft_drop\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    790\u001b[0m             \u001b[0mright_drop\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 791\u001b[0;31m         ) = self._get_merge_keys()\n\u001b[0m\u001b[1;32m    792\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    793\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mleft_drop\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m_get_merge_keys\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1267\u001b[0m                         \u001b[0mrk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mHashable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1268\u001b[0m                         \u001b[0;32mif\u001b[0m \u001b[0mrk\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1269\u001b[0;31m                             \u001b[0mright_keys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label_or_level_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1270\u001b[0m                         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1271\u001b[0m                             \u001b[0;31m# work-around for merge_asof(right_index=True)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_get_label_or_level_values\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1842\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_level_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1843\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1844\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1845\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1846\u001b[0m         \u001b[0;31m# Check for duplicates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'CustomerID'"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "path='/content/customer dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "print(df1)\n",
        "path='/content/sales dataset.zip'\n",
        "df2=pd.read_csv(path,encoding='latin-1')\n",
        "print(df2)\n",
        "merged_df=pd.merge(df1,df2,on='CustomerID')\n",
        "print(merged_df)\n",
        "merged_df.to_csv('merged_dataset.csv',index=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "normalized"
      ],
      "metadata": {
        "id": "b0X97J2MButt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path='/content/customer dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "print(numeric_df)\n",
        "x=numeric_df.drop('Annual_Income_(k$)',axis=1)\n",
        "scaler=MinMaxScaler()\n",
        "x_normalized=scaler.fit_transform(x)\n",
        "normalized_df=pd.DataFrame(x_normalized,columns=x.columns)\n",
        "print(normalized_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wvJmuYvWBZ2h",
        "outputId": "a3f7639e-3387-4e24-f545-5c8e6f90ffde"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     CustomerID  Age  Annual_Income_(k$)  Spending_Score\n",
            "0             1   19                  15              39\n",
            "1             2   21                  15              81\n",
            "2             3   20                  16               6\n",
            "3             4   23                  16              77\n",
            "4             5   31                  17              40\n",
            "..          ...  ...                 ...             ...\n",
            "195         196   35                 120              79\n",
            "196         197   45                 126              28\n",
            "197         198   32                 126              74\n",
            "198         199   32                 137              18\n",
            "199         200   30                 137              83\n",
            "\n",
            "[200 rows x 4 columns]\n",
            "     CustomerID       Age  Spending_Score\n",
            "0      0.000000  0.019231        0.387755\n",
            "1      0.005025  0.057692        0.816327\n",
            "2      0.010050  0.038462        0.051020\n",
            "3      0.015075  0.096154        0.775510\n",
            "4      0.020101  0.250000        0.397959\n",
            "..          ...       ...             ...\n",
            "195    0.979899  0.326923        0.795918\n",
            "196    0.984925  0.519231        0.275510\n",
            "197    0.989950  0.269231        0.744898\n",
            "198    0.994975  0.269231        0.173469\n",
            "199    1.000000  0.230769        0.836735\n",
            "\n",
            "[200 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path='/content/sales dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "print(numeric_df)\n",
        "x=numeric_df.drop('QTR_ID',axis=1)\n",
        "scaler=MinMaxScaler()\n",
        "x_normalized=scaler.fit_transform(x)\n",
        "normalized_df=pd.DataFrame(x_normalized,columns=x.columns)\n",
        "print(normalized_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Va_uqCvnCYcZ",
        "outputId": "94eed9c6-0660-4488-a895-57ecf7ed1b8c"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      ORDERNUMBER  QUANTITYORDERED  PRICEEACH  ORDERLINENUMBER    SALES  \\\n",
            "0           10107               30      95.70                2  2871.00   \n",
            "1           10121               34      81.35                5  2765.90   \n",
            "2           10134               41      94.74                2  3884.34   \n",
            "3           10145               45      83.26                6  3746.70   \n",
            "4           10159               49     100.00               14  5205.27   \n",
            "...           ...              ...        ...              ...      ...   \n",
            "2818        10350               20     100.00               15  2244.40   \n",
            "2819        10373               29     100.00                1  3978.51   \n",
            "2820        10386               43     100.00                4  5417.57   \n",
            "2821        10397               34      62.24                1  2116.16   \n",
            "2822        10414               47      65.52                9  3079.44   \n",
            "\n",
            "      QTR_ID  MONTH_ID  YEAR_ID  MSRP  \n",
            "0          1         2     2003    95  \n",
            "1          2         5     2003    95  \n",
            "2          3         7     2003    95  \n",
            "3          3         8     2003    95  \n",
            "4          4        10     2003    95  \n",
            "...      ...       ...      ...   ...  \n",
            "2818       4        12     2004    54  \n",
            "2819       1         1     2005    54  \n",
            "2820       1         3     2005    54  \n",
            "2821       1         3     2005    54  \n",
            "2822       2         5     2005    54  \n",
            "\n",
            "[2823 rows x 9 columns]\n",
            "      ORDERNUMBER  QUANTITYORDERED  PRICEEACH  ORDERLINENUMBER     SALES  \\\n",
            "0        0.021538         0.263736   0.941193         0.058824  0.175644   \n",
            "1        0.064615         0.307692   0.744940         0.235294  0.167916   \n",
            "2        0.104615         0.384615   0.928063         0.058824  0.250150   \n",
            "3        0.138462         0.428571   0.771061         0.294118  0.240030   \n",
            "4        0.181538         0.472527   1.000000         0.764706  0.347273   \n",
            "...           ...              ...        ...              ...       ...   \n",
            "2818     0.769231         0.153846   1.000000         0.823529  0.129572   \n",
            "2819     0.840000         0.252747   1.000000         0.000000  0.257074   \n",
            "2820     0.880000         0.406593   1.000000         0.176471  0.362882   \n",
            "2821     0.913846         0.307692   0.483589         0.000000  0.120143   \n",
            "2822     0.966154         0.450549   0.528446         0.470588  0.190969   \n",
            "\n",
            "      MONTH_ID  YEAR_ID      MSRP  \n",
            "0     0.090909      0.0  0.342541  \n",
            "1     0.363636      0.0  0.342541  \n",
            "2     0.545455      0.0  0.342541  \n",
            "3     0.636364      0.0  0.342541  \n",
            "4     0.818182      0.0  0.342541  \n",
            "...        ...      ...       ...  \n",
            "2818  1.000000      0.5  0.116022  \n",
            "2819  0.000000      1.0  0.116022  \n",
            "2820  0.181818      1.0  0.116022  \n",
            "2821  0.181818      1.0  0.116022  \n",
            "2822  0.363636      1.0  0.116022  \n",
            "\n",
            "[2823 rows x 8 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "dtandarization"
      ],
      "metadata": {
        "id": "ettwzaU5Cwkc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path='/content/customer dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "print(numeric_df)\n",
        "std_dev=numeric_df.std()\n",
        "print(std_dev)\n",
        "std_dev_specific=numeric_df['Annual_Income_(k$)'].std()\n",
        "print(std_dev_specific)\n",
        "std_dev_subset=numeric_df[['CustomerID','Spending_Score']].std()\n",
        "print(std_dev_subset)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OuFDUMd7C1Fm",
        "outputId": "bde7bde4-22e1-4439-e48b-820bb6a9359b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     CustomerID  Age  Annual_Income_(k$)  Spending_Score\n",
            "0             1   19                  15              39\n",
            "1             2   21                  15              81\n",
            "2             3   20                  16               6\n",
            "3             4   23                  16              77\n",
            "4             5   31                  17              40\n",
            "..          ...  ...                 ...             ...\n",
            "195         196   35                 120              79\n",
            "196         197   45                 126              28\n",
            "197         198   32                 126              74\n",
            "198         199   32                 137              18\n",
            "199         200   30                 137              83\n",
            "\n",
            "[200 rows x 4 columns]\n",
            "CustomerID            57.879185\n",
            "Age                   13.969007\n",
            "Annual_Income_(k$)    26.264721\n",
            "Spending_Score        25.823522\n",
            "dtype: float64\n",
            "26.264721165271244\n",
            "CustomerID        57.879185\n",
            "Spending_Score    25.823522\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path='/content/sales dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "print(numeric_df)\n",
        "std_dev=numeric_df.std()\n",
        "print(std_dev)\n",
        "std_dev_specific=numeric_df['QUANTITYORDERED'].std()\n",
        "print(std_dev_specific)\n",
        "std_dev_subset=numeric_df[['ORDERLINENUMBER','QTR_ID']].std()\n",
        "print(std_dev_subset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ttMMuRaxDuhx",
        "outputId": "b2eec8df-aee5-4af4-adb3-fce212c33d45"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      ORDERNUMBER  QUANTITYORDERED  PRICEEACH  ORDERLINENUMBER    SALES  \\\n",
            "0           10107               30      95.70                2  2871.00   \n",
            "1           10121               34      81.35                5  2765.90   \n",
            "2           10134               41      94.74                2  3884.34   \n",
            "3           10145               45      83.26                6  3746.70   \n",
            "4           10159               49     100.00               14  5205.27   \n",
            "...           ...              ...        ...              ...      ...   \n",
            "2818        10350               20     100.00               15  2244.40   \n",
            "2819        10373               29     100.00                1  3978.51   \n",
            "2820        10386               43     100.00                4  5417.57   \n",
            "2821        10397               34      62.24                1  2116.16   \n",
            "2822        10414               47      65.52                9  3079.44   \n",
            "\n",
            "      QTR_ID  MONTH_ID  YEAR_ID  MSRP  \n",
            "0          1         2     2003    95  \n",
            "1          2         5     2003    95  \n",
            "2          3         7     2003    95  \n",
            "3          3         8     2003    95  \n",
            "4          4        10     2003    95  \n",
            "...      ...       ...      ...   ...  \n",
            "2818       4        12     2004    54  \n",
            "2819       1         1     2005    54  \n",
            "2820       1         3     2005    54  \n",
            "2821       1         3     2005    54  \n",
            "2822       2         5     2005    54  \n",
            "\n",
            "[2823 rows x 9 columns]\n",
            "ORDERNUMBER          92.085478\n",
            "QUANTITYORDERED       9.741443\n",
            "PRICEEACH            20.174277\n",
            "ORDERLINENUMBER       4.225841\n",
            "SALES              1841.865106\n",
            "QTR_ID                1.203878\n",
            "MONTH_ID              3.656633\n",
            "YEAR_ID               0.699670\n",
            "MSRP                 40.187912\n",
            "dtype: float64\n",
            "9.741442737069592\n",
            "ORDERLINENUMBER    4.225841\n",
            "QTR_ID             1.203878\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "binary code"
      ],
      "metadata": {
        "id": "GbPZKJhgEFm_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path='/content/customer dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "print(numeric_df)\n",
        "binary_column=numeric_df['Annual_Income_(k$)']>0.5\n",
        "print(binary_column)\n",
        "binary_column_int=binary_column.astype(int)\n",
        "print(binary_column_int)\n",
        "binary_column_multiple=(numeric_df['Annual_Income_(k$)']>0.5)*numeric_df['Spending_Score']\n",
        "print(binary_column_multiple)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xzc7KvXHEIKl",
        "outputId": "1bad9a3e-7307-4867-ad28-95ba35d38089"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     CustomerID  Age  Annual_Income_(k$)  Spending_Score\n",
            "0             1   19                  15              39\n",
            "1             2   21                  15              81\n",
            "2             3   20                  16               6\n",
            "3             4   23                  16              77\n",
            "4             5   31                  17              40\n",
            "..          ...  ...                 ...             ...\n",
            "195         196   35                 120              79\n",
            "196         197   45                 126              28\n",
            "197         198   32                 126              74\n",
            "198         199   32                 137              18\n",
            "199         200   30                 137              83\n",
            "\n",
            "[200 rows x 4 columns]\n",
            "0      True\n",
            "1      True\n",
            "2      True\n",
            "3      True\n",
            "4      True\n",
            "       ... \n",
            "195    True\n",
            "196    True\n",
            "197    True\n",
            "198    True\n",
            "199    True\n",
            "Name: Annual_Income_(k$), Length: 200, dtype: bool\n",
            "0      1\n",
            "1      1\n",
            "2      1\n",
            "3      1\n",
            "4      1\n",
            "      ..\n",
            "195    1\n",
            "196    1\n",
            "197    1\n",
            "198    1\n",
            "199    1\n",
            "Name: Annual_Income_(k$), Length: 200, dtype: int64\n",
            "0      39\n",
            "1      81\n",
            "2       6\n",
            "3      77\n",
            "4      40\n",
            "       ..\n",
            "195    79\n",
            "196    28\n",
            "197    74\n",
            "198    18\n",
            "199    83\n",
            "Length: 200, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path='/content/sales dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "print(numeric_df)\n",
        "binary_column=numeric_df['QTR_ID']>0.5\n",
        "print(binary_column)\n",
        "binary_column_int=binary_column.astype(int)\n",
        "print(binary_column_int)\n",
        "binary_column_multiple=(numeric_df['QTR_ID']>0.5)*numeric_df['QUANTITYORDERED']\n",
        "print(binary_column_multiple)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cwAlGSnYFf9N",
        "outputId": "9622e385-6120-478a-c000-9aa830f1f96f"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      ORDERNUMBER  QUANTITYORDERED  PRICEEACH  ORDERLINENUMBER    SALES  \\\n",
            "0           10107               30      95.70                2  2871.00   \n",
            "1           10121               34      81.35                5  2765.90   \n",
            "2           10134               41      94.74                2  3884.34   \n",
            "3           10145               45      83.26                6  3746.70   \n",
            "4           10159               49     100.00               14  5205.27   \n",
            "...           ...              ...        ...              ...      ...   \n",
            "2818        10350               20     100.00               15  2244.40   \n",
            "2819        10373               29     100.00                1  3978.51   \n",
            "2820        10386               43     100.00                4  5417.57   \n",
            "2821        10397               34      62.24                1  2116.16   \n",
            "2822        10414               47      65.52                9  3079.44   \n",
            "\n",
            "      QTR_ID  MONTH_ID  YEAR_ID  MSRP  \n",
            "0          1         2     2003    95  \n",
            "1          2         5     2003    95  \n",
            "2          3         7     2003    95  \n",
            "3          3         8     2003    95  \n",
            "4          4        10     2003    95  \n",
            "...      ...       ...      ...   ...  \n",
            "2818       4        12     2004    54  \n",
            "2819       1         1     2005    54  \n",
            "2820       1         3     2005    54  \n",
            "2821       1         3     2005    54  \n",
            "2822       2         5     2005    54  \n",
            "\n",
            "[2823 rows x 9 columns]\n",
            "0       True\n",
            "1       True\n",
            "2       True\n",
            "3       True\n",
            "4       True\n",
            "        ... \n",
            "2818    True\n",
            "2819    True\n",
            "2820    True\n",
            "2821    True\n",
            "2822    True\n",
            "Name: QTR_ID, Length: 2823, dtype: bool\n",
            "0       1\n",
            "1       1\n",
            "2       1\n",
            "3       1\n",
            "4       1\n",
            "       ..\n",
            "2818    1\n",
            "2819    1\n",
            "2820    1\n",
            "2821    1\n",
            "2822    1\n",
            "Name: QTR_ID, Length: 2823, dtype: int64\n",
            "0       30\n",
            "1       34\n",
            "2       41\n",
            "3       45\n",
            "4       49\n",
            "        ..\n",
            "2818    20\n",
            "2819    29\n",
            "2820    43\n",
            "2821    34\n",
            "2822    47\n",
            "Length: 2823, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ranking transformation"
      ],
      "metadata": {
        "id": "8JLxsNbrF8S5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path='/content/customer dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "ranked_column=numeric_df['Annual_Income_(k$)'].rank()\n",
        "rank_column_method=numeric_df['Annual_Income_(k$)'].rank(method='dense')\n",
        "print(rank_column_method)\n",
        "ranked_column=numeric_df[['Age','Spending_Score']].rank()\n",
        "print(ranked_column)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "omjpHrYBGBk2",
        "outputId": "a853a601-034d-4b8e-cc2a-54fbc7a8da46"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       1.0\n",
            "1       1.0\n",
            "2       2.0\n",
            "3       2.0\n",
            "4       3.0\n",
            "       ... \n",
            "195    62.0\n",
            "196    63.0\n",
            "197    63.0\n",
            "198    64.0\n",
            "199    64.0\n",
            "Name: Annual_Income_(k$), Length: 200, dtype: float64\n",
            "       Age  Spending_Score\n",
            "0      8.5            58.5\n",
            "1     20.0           171.5\n",
            "2     15.0            10.5\n",
            "3     28.5           166.0\n",
            "4     66.5            61.5\n",
            "..     ...             ...\n",
            "195   94.0           169.5\n",
            "196  133.0            43.5\n",
            "197   76.0           156.5\n",
            "198   76.0            34.0\n",
            "199   59.0           174.5\n",
            "\n",
            "[200 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path='/content/sales dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "ranked_column=numeric_df['QUANTITYORDERED'].rank()\n",
        "rank_column_method=numeric_df['QUANTITYORDERED'].rank(method='dense')\n",
        "print(rank_column_method)\n",
        "ranked_column=numeric_df[['QTR_ID','ORDERLINENUMBER']].rank()\n",
        "print(ranked_column)"
      ],
      "metadata": {
        "id": "fjDYg_1vH_XE",
        "outputId": "64f8610c-b5d2-4f85-8ab5-71744b46b4e8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       20.0\n",
            "1       24.0\n",
            "2       31.0\n",
            "3       35.0\n",
            "4       39.0\n",
            "        ... \n",
            "2818    10.0\n",
            "2819    19.0\n",
            "2820    33.0\n",
            "2821    24.0\n",
            "2822    37.0\n",
            "Name: QUANTITYORDERED, Length: 2823, dtype: float64\n",
            "      QTR_ID  ORDERLINENUMBER\n",
            "0      333.0            453.0\n",
            "1      946.0           1244.0\n",
            "2     1478.0            453.0\n",
            "3     1478.0           1474.0\n",
            "4     2276.5           2650.0\n",
            "...      ...              ...\n",
            "2818  2276.5           2718.5\n",
            "2819   333.0            154.0\n",
            "2820   333.0            996.5\n",
            "2821   333.0            154.0\n",
            "2822   946.0           2051.0\n",
            "\n",
            "[2823 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "discrition"
      ],
      "metadata": {
        "id": "jAXx1MBJIdOs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import KBinsDiscretizer\n",
        "path='/content/customer dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "culumn_name='Annual_Income_(k$)'\n",
        "kbins=KBinsDiscretizer(n_bins=3,encode='ordinal')\n",
        "discretized_column=kbins.fit_transform(numeric_df[[culumn_name]])\n",
        "print(discretized_column)\n",
        "bins=[0,25,50,75,100]\n",
        "labels=['low','medium','high', 'very high']\n",
        "discretized_column_pandas=pd.cut(numeric_df[culumn_name],bins=bins,labels=labels)\n",
        "print(discretized_column_pandas)"
      ],
      "metadata": {
        "id": "gb-e957EKLXs",
        "outputId": "6c66ecaa-0540-4b36-a427-a00b4cd233d6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [1.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]\n",
            " [2.]]\n",
            "0      low\n",
            "1      low\n",
            "2      low\n",
            "3      low\n",
            "4      low\n",
            "      ... \n",
            "195    NaN\n",
            "196    NaN\n",
            "197    NaN\n",
            "198    NaN\n",
            "199    NaN\n",
            "Name: Annual_Income_(k$), Length: 200, dtype: category\n",
            "Categories (4, object): ['low' < 'medium' < 'high' < 'very high']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import KBinsDiscretizer\n",
        "path='/content/sales dataset.zip'\n",
        "df1=pd.read_csv(path,encoding='latin-1')\n",
        "numeric_df=df1.select_dtypes(include=['number'])\n",
        "culumn_name='QTR_ID'\n",
        "kbins=KBinsDiscretizer(n_bins=3,encode='ordinal')\n",
        "discretized_column=kbins.fit_transform(numeric_df[[culumn_name]])\n",
        "print(discretized_column)\n",
        "bins=[0,25,50,75,100]\n",
        "labels=['low','medium','high', 'very high']\n",
        "discretized_column_pandas=pd.cut(numeric_df[culumn_name],bins=bins,labels=labels)\n",
        "print(discretized_column_pandas)"
      ],
      "metadata": {
        "id": "G1qSCtdoKn29",
        "outputId": "781eb7cb-d093-4cad-e7c4-9ac23a236123",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.]\n",
            " [1.]\n",
            " [1.]\n",
            " ...\n",
            " [0.]\n",
            " [0.]\n",
            " [1.]]\n",
            "0       low\n",
            "1       low\n",
            "2       low\n",
            "3       low\n",
            "4       low\n",
            "       ... \n",
            "2818    low\n",
            "2819    low\n",
            "2820    low\n",
            "2821    low\n",
            "2822    low\n",
            "Name: QTR_ID, Length: 2823, dtype: category\n",
            "Categories (4, object): ['low' < 'medium' < 'high' < 'very high']\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_discretization.py:322: UserWarning: Bins whose width are too small (i.e., <= 1e-8) in feature 0 are removed. Consider decreasing the number of bins.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPhXkKNTwu0mjGaBPHcHHYP",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}